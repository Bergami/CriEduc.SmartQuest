"""
üéØ FASE 4: Interfaces Abstratas para Dependency Injection

CONCEITO DE INTERFACES:
- Interface √© um "contrato" que define m√©todos que uma classe deve implementar
- Em Python, usamos Protocol (typing) ou ABC (Abstract Base Class)
- Interfaces permitem programar contra abstra√ß√µes, n√£o implementa√ß√µes concretas

BENEF√çCIOS DAS INTERFACES:
1. DESACOPLAMENTO: C√≥digo depende de abstra√ß√£o, n√£o implementa√ß√£o
2. TESTABILIDADE: F√°cil criar mocks que implementam a interface
3. FLEXIBILIDADE: Trocar implementa√ß√µes sem alterar c√≥digo cliente
4. EXTENSIBILIDADE: Adicionar novas implementa√ß√µes facilmente

PADR√ÉO PROTOCOL:
- Mais Pyth√¥nico que ABC
- Duck typing + type hints
- N√£o requer heran√ßa expl√≠cita
- Checagem est√°tica via mypy/pylance

EXEMPLO:
```python
class IEmailService(Protocol):
    def send_email(self, to: str, subject: str) -> bool: ...

class SMTPEmailService:  # N√£o precisa herdar de IEmailService
    def send_email(self, to: str, subject: str) -> bool:
        # Implementa√ß√£o SMTP
        return True

# Type checker reconhece automaticamente que SMTPEmailService implementa IEmailService
```
"""
from typing import Protocol, Dict, Any, List
from fastapi import UploadFile
from app.models.internal import InternalDocumentResponse, InternalImageData, InternalQuestion


class IImageCategorizer(Protocol):
    """
    üè∑Ô∏è INTERFACE: Categoriza√ß√£o de Imagens
    
    RESPONSABILIDADE:
    - Analisar e categorizar imagens extra√≠das de documentos
    - Classificar tipo de imagem (gr√°fico, diagrama, foto, etc.)
    
    IMPLEMENTA√á√ïES POSS√çVEIS:
    - ImageCategorizationService (atual)
    - AIImageCategorizer (futuro - com ML)
    - MockImageCategorizer (testes)
    """
    
    async def categorize_images(self, images: List[InternalImageData]) -> List[InternalImageData]:
        """
        Categoriza uma lista de imagens extra√≠das.
        
        Args:
            images: Lista de imagens para categorizar
            
        Returns:
            Lista de imagens com categorias atribu√≠das
        """
        ...


class IImageExtractor(Protocol):
    """
    üì∏ INTERFACE: Extra√ß√£o de Imagens
    
    RESPONSABILIDADE:
    - Extrair imagens de documentos PDF
    - Processar e converter formatos
    - Identificar posi√ß√µes e metadados
    
    IMPLEMENTA√á√ïES POSS√çVEIS:
    - ImageExtractionOrchestrator (atual)
    - PyMuPDFExtractor (alternativa)
    - MockImageExtractor (testes)
    """
    
    async def extract_images_from_pdf_data(self, extracted_data: Dict[str, Any]) -> List[InternalImageData]:
        """
        Extrai imagens dos dados processados do PDF.
        
        Args:
            extracted_data: Dados extra√≠dos do documento
            
        Returns:
            Lista de imagens extra√≠das
        """
        ...


class IContextBuilder(Protocol):
    """
    üß± INTERFACE: Constru√ß√£o de Context Blocks
    
    RESPONSABILIDADE:
    - Construir blocos de contexto a partir de quest√µes e texto
    - Associar contexto relevante a cada quest√£o
    - Estruturar informa√ß√µes para processamento
    
    IMPLEMENTA√á√ïES POSS√çVEIS:
    - RefactoredContextBlockBuilder (atual)
    - AIContextBuilder (futuro - com NLP)
    - MockContextBuilder (testes)
    """
    
    async def build_context_blocks(self, 
                                 questions: List[InternalQuestion], 
                                 extracted_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Constr√≥i blocos de contexto para as quest√µes.
        
        Args:
            questions: Lista de quest√µes extra√≠das
            extracted_data: Dados brutos do documento
            
        Returns:
            Lista de context blocks estruturados
        """
        ...


class IFigureProcessor(Protocol):
    """
    üñºÔ∏è INTERFACE: Processamento de Figuras
    
    RESPONSABILIDADE:
    - Processar figuras atrav√©s de servi√ßos Azure
    - Extrair texto e metadados de imagens
    - Associar figuras a quest√µes relevantes
    
    IMPLEMENTA√á√ïES POSS√çVEIS:
    - AzureFigureProcessor (atual)
    - LocalFigureProcessor (alternativa)
    - MockFigureProcessor (testes)
    """
    
    async def process_figures(self, 
                            images: List[InternalImageData], 
                            context_blocks: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        Processa figuras e associa a context blocks.
        
        Args:
            images: Lista de imagens categorizadas
            context_blocks: Blocos de contexto das quest√µes
            
        Returns:
            Dicion√°rio com figuras processadas e associa√ß√µes
        """
        ...


class IDocumentAnalysisOrchestrator(Protocol):
    """
    üé≠ INTERFACE: Orquestrador de An√°lise de Documentos
    
    RESPONSABILIDADE:
    - Coordenar o pipeline completo de an√°lise
    - Orquestrar todas as fases do processamento
    - Agregar resultados finais
    
    IMPLEMENTA√á√ïES POSS√çVEIS:
    - DocumentAnalysisOrchestrator (atual)
    - FastDocumentOrchestrator (otimizada)
    - MockDocumentOrchestrator (testes)
    """
    
    async def orchestrate_analysis(self,
                                 extracted_data: Dict[str, Any],
                                 email: str,
                                 filename: str,
                                 file: UploadFile,
                                 use_refactored: bool = True) -> InternalDocumentResponse:
        """
        Orquestra a an√°lise completa do documento.
        
        Args:
            extracted_data: Dados brutos extra√≠dos
            email: Email do usu√°rio
            filename: Nome do arquivo
            file: UploadFile para fallback
            use_refactored: Flag para usar l√≥gica avan√ßada
            
        Returns:
            Resposta estruturada completa
        """
        ...


class IAnalyzeService(Protocol):
    """
    üéØ INTERFACE: Servi√ßo Principal de An√°lise
    
    RESPONSABILIDADE:
    - Validar dados de entrada
    - Delegar an√°lise para orquestrador
    - Retornar resposta formatada
    
    IMPLEMENTA√á√ïES POSS√çVEIS:
    - AnalyzeService (atual)
    - QuickAnalyzeService (vers√£o simplificada)
    - MockAnalyzeService (testes)
    """
    
    async def process_document_with_models(self,
                                         extracted_data: Dict[str, Any],
                                         email: str,
                                         filename: str,
                                         file: UploadFile,
                                         use_refactored: bool = True) -> InternalDocumentResponse:
        """
        Processa documento com modelos internos.
        
        Args:
            extracted_data: Dados brutos extra√≠dos
            email: Email do usu√°rio
            filename: Nome do arquivo
            file: UploadFile para fallback
            use_refactored: Flag para usar l√≥gica avan√ßada
            
        Returns:
            Resposta estruturada completa
        """
        ...


# ==================================================================================
# üìù DOCUMENTA√á√ÉO DE USO DAS INTERFACES
# ==================================================================================
"""
COMO USAR AS INTERFACES COM DI CONTAINER:

1. REGISTRO NO CONTAINER:
```python
from app.core.di_container import container

# Mapear interfaces para implementa√ß√µes concretas
container.register(IImageCategorizer, ImageCategorizationService)
container.register(IImageExtractor, ImageExtractionOrchestrator)
container.register(IContextBuilder, RefactoredContextBlockBuilder)
container.register(IFigureProcessor, AzureFigureProcessor)
container.register(IDocumentAnalysisOrchestrator, DocumentAnalysisOrchestrator)
```

2. CONSTRUTOR COM INTERFACES:
```python
class DocumentAnalysisOrchestrator:
    def __init__(self,
                 image_categorizer: IImageCategorizer,  # ‚Üê Interface, n√£o implementa√ß√£o
                 image_extractor: IImageExtractor,      # ‚Üê Interface, n√£o implementa√ß√£o
                 context_builder: IContextBuilder,      # ‚Üê Interface, n√£o implementa√ß√£o
                 figure_processor: IFigureProcessor):   # ‚Üê Interface, n√£o implementa√ß√£o
        self._image_categorizer = image_categorizer
        self._image_extractor = image_extractor
        self._context_builder = context_builder
        self._figure_processor = figure_processor
```

3. RESOLU√á√ÉO AUTOM√ÅTICA:
```python
# O container automaticamente resolve todas as interfaces
orchestrator = container.resolve(IDocumentAnalysisOrchestrator)
# Nenhuma depend√™ncia manual necess√°ria!
```

4. FACILITA TESTES:
```python
# Mock implementations para testes
class MockImageCategorizer:
    async def categorize_images(self, images): return images

class MockImageExtractor:
    async def extract_images_from_pdf_data(self, data): return []

# Registrar mocks para testes
test_container.register(IImageCategorizer, MockImageCategorizer)
test_container.register(IImageExtractor, MockImageExtractor)
```

BENEF√çCIOS ALCAN√áADOS:
‚úÖ Zero acoplamento entre classes
‚úÖ F√°cil substitui√ß√£o de implementa√ß√µes
‚úÖ Testes simplificados com mocks
‚úÖ Configura√ß√£o centralizada no container
‚úÖ Auto-wiring baseado em type hints
‚úÖ Detec√ß√£o de depend√™ncias circulares
‚úÖ Gest√£o autom√°tica de ciclo de vida
"""