"""
Document Extraction Service

Este servi√ßo tem a responsabilidade √∫nica de extrair dados de um documento,
gerenciando de forma transparente o cache e os provedores de extra√ß√£o.
"""
import logging
from typing import Dict, Any
from fastapi import UploadFile
from app.core.cache import DocumentCacheManager
from app.services.core.document_extraction_factory import DocumentExtractionFactory

logger = logging.getLogger(__name__)

class DocumentExtractionService:
    """
    Servi√ßo com a responsabilidade √∫nica de extrair dados de um documento,
    gerenciando de forma transparente o cache e os provedores de extra√ß√£o.
    """
    
    @staticmethod
    async def get_extraction_data(file: UploadFile, email: str) -> Dict[str, Any]:
        """
        Obt√©m os dados extra√≠dos de um documento, usando o cache primeiro.
        Se n√£o houver cache, chama o provedor de extra√ß√£o (Azure) e armazena o resultado.
        
        Args:
            file: Arquivo para extra√ß√£o
            email: Email do usu√°rio para a chave de cache
            
        Returns:
            Dicion√°rio com os dados extra√≠dos.
        """
        # A l√≥gica de cache √© centralizada aqui.
        cache_manager = DocumentCacheManager()
        
        # 1. Verificar cache
        # O ponteiro do arquivo precisa ser resetado para a leitura do cache funcionar
        await file.seek(0)
        cached_result = await cache_manager.get_cached_document(email, file)
        if cached_result:
            logger.info(f"üéØ Cache HIT: Using cached extraction for {email} - {file.filename}")
            # Resetar o ponteiro do arquivo novamente para o pr√≥ximo consumidor
            await file.seek(0)
            return cached_result.get("extracted_data")

        logger.info(f"‚ö° Cache MISS: Extracting from provider for {email} - {file.filename}")
        
        # 2. Se n√£o houver cache, extrair do provedor
        # Resetar o ponteiro do arquivo para a extra√ß√£o
        await file.seek(0)
        extractor = DocumentExtractionFactory.get_provider()
        extracted_data = await extractor.extract_document_data(file)
        
        # 3. Armazenar no cache para futuras requisi√ß√µes
        if extracted_data:
            # Resetar o ponteiro do arquivo para a cria√ß√£o da chave de cache
            await file.seek(0)
            await cache_manager.cache_document_result(email, file, extracted_data)
            logger.info(f"üíæ Cached extraction result for {email} - {file.filename}")
        
        # Resetar o ponteiro do arquivo para o pr√≥ximo consumidor
        await file.seek(0)
        return extracted_data
